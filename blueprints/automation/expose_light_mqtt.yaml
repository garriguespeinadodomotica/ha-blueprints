blueprint:
  name: Exponer helper Light por MQTT (robusto, JSON, dict seguro)
  description: >
    Controla un helper/grupo de luces desde MQTT con payload JSON y publica su estado.
    Prioridad color: rgb > hs > xy > color_temp.
    Usa diccionarios dinámicos para evitar errores de tipo (brightness, transition, color...).
  domain: automation
  input:
    target_light:
      name: Luz/grupo (helper) a exponer
      selector:
        entity:
          domain: light
    cmd_topic:
      name: Topic de comandos (JSON)
      description: "Ej.: /homeassistant/light/grupo_luces_dormitorio_1/set"
      selector:
        text:
    state_topic:
      name: Topic de estado (JSON)
      description: "Si lo dejas vacío, usa el de comandos cambiando /set por /state"
      default: ""
      selector:
        text:
    qos:
      name: QoS MQTT
      default: 0
      selector:
        number:
          min: 0
          max: 2
          step: 1
    retain:
      name: Retain en estado
      default: false
      selector:
        boolean: {}
    allow_toggle:
      name: Permitir TOGGLE
      default: true
      selector:
        boolean: {}

mode: queued
max: 10

variables:
  ent: !input target_light
  cmd_t: !input cmd_topic
  st_t_provided: !input state_topic
  st_t: >-
    {% set s = st_t_provided %}
    {% if not s or s == '' %}
      {{ (cmd_t | replace('/set','/state')) }}
    {% else %}
      {{ s }}
    {% endif %}
  q: !input qos
  r: !input retain
  allow_t: !input allow_toggle

trigger:
  - id: mqtt_cmd
    platform: mqtt
    topic: !input cmd_topic
    qos: !input qos

  - id: state_change
    platform: state
    entity_id: !input target_light

action:
  - choose:

      # ===== Rama: comando MQTT entrante =====
      - conditions: "{{ trigger.id == 'mqtt_cmd' }}"
        sequence:
          - variables:
              p: "{{ trigger.payload_json }}"
              st: "{{ (p.state | default('')) | upper }}"
              # valores convertidos seguros
              b_val: "{{ (p.brightness | int(0)) if p.brightness is defined else none }}"
              t_val: "{{ (p.transition | float(0)) if p.transition is defined else none }}"
              # detectar colores válidos
              has_rgb: "{{ p.color is defined and p.color.rgb is defined }}"
              has_hs: "{{ p.hs_color is defined }}"
              has_xy: "{{ p.xy_color is defined }}"
              has_ct: "{{ p.color_temp is defined }}"
              # elegir UNO
              color_mode: >-
                {% if has_rgb %}rgb
                {% elif has_hs %}hs
                {% elif has_xy %}xy
                {% elif has_ct %}ct
                {% else %}none{% endif %}
              rgb_sel: "{{ p.color.rgb if color_mode == 'rgb' else none }}"
              hs_sel: "{{ p.hs_color if color_mode == 'hs' else none }}"
              xy_sel: "{{ p.xy_color if color_mode == 'xy' else none }}"
              ct_sel: "{{ (p.color_temp | int) if color_mode == 'ct' else none }}"
          - choose:
              - conditions: "{{ st == 'ON' }}"
                sequence:
                  - service: light.turn_on
                    target: 
                      entity_id: "{{ ent }}"
                    data: >-
                      {% set d = dict() %}
                      {% if b_val is number and b_val > 0 %}{% set _ = d.update({'brightness': b_val}) %}{% endif %}
                      {% if t_val is number and t_val >= 0 %}{% set _ = d.update({'transition': t_val}) %}{% endif %}
                      {% if rgb_sel is not none %}{% set _ = d.update({'rgb_color': rgb_sel}) %}{% endif %}
                      {% if hs_sel is not none %}{% set _ = d.update({'hs_color': hs_sel}) %}{% endif %}
                      {% if xy_sel is not none %}{% set _ = d.update({'xy_color': xy_sel}) %}{% endif %}
                      {% if ct_sel is not none %}{% set _ = d.update({'color_temp': ct_sel}) %}{% endif %}
                      {{ d }}

              - conditions: "{{ st == 'OFF' }}"
                sequence:
                  - service: light.turn_off
                    target: 
                      entity_id: "{{ ent }}"
                    data: >-
                      {% set d = dict() %}
                      {% if t_val is number and t_val >= 0 %}{% set _ = d.update({'transition': t_val}) %}{% endif %}
                      {{ d }}

              - conditions: "{{ st == 'TOGGLE' and allow_t }}"
                sequence:
                  - service: light.toggle
                    target: 
                      entity_id: "{{ ent }}"

      # ===== Rama: cambio de estado del helper → publicar JSON =====
      - conditions: "{{ trigger.id == 'state_change' }}"
        sequence:
          - variables:
              cur_state: "{{ states(ent) | upper }}"
              br: "{{ state_attr(ent, 'brightness') }}"
              ct: "{{ state_attr(ent, 'color_temp') }}"
              hs: "{{ state_attr(ent, 'hs_color') }}"
              rgb: "{{ state_attr(ent, 'rgb_color') }}"
              rgbw: "{{ state_attr(ent, 'rgbw_color') }}"
              xy: "{{ state_attr(ent, 'xy_color') }}"
              rgb_final: >-
                {% if rgb is not none %}{{ rgb }}
                {% elif rgbw is not none %}{{ (rgbw | list)[:3] }}
                {% else %}{{ none }}{% endif %}
          - service: mqtt.publish
            data:
              topic: "{{ st_t }}"
              qos: "{{ q }}"
              retain: "{{ r }}"
              payload: >-
                {
                  "state": "{{ cur_state }}"{% if br is not none %}, "brightness": {{ br }}{% endif %}{% if ct is not none %}, "color_temp": {{ ct }}{% endif %}{% if hs is not none %}, "hs_color": {{ hs }}{% endif %}{% if rgb_final is not none %}, "color": { "rgb": {{ rgb_final }} }{% endif %}{% if xy is not none %}, "xy_color": {{ xy }}{% endif %}
                }
